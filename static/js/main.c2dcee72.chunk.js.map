{"version":3,"sources":["assets/logo-circle.svg","assets/hero-image.svg","assets/twitter.svg","assets/github.svg","components/Nav.js","components/Hero.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","className","src","lock","alt","Component","Hero","heroImage","Footer","href","target","rel","github","twitter","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qHAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,wOCyB5BC,G,uLAjBX,OACE,yBAAKC,UAAU,OACb,wBAAIA,UAAU,eACZ,yBACEC,IAAKC,IACLC,IAAI,sBACJH,UAAU,cAJd,kBAOA,4BAAQA,UAAU,eAAlB,oB,GAXUI,c,gBCmBHC,G,uLAjBX,OACE,6BAASL,UAAU,QACjB,wBAAIA,UAAU,gBAAd,wCAGA,wBAAIA,UAAU,mBAAd,qEAGA,yBACEC,IAAKK,IACLH,IAAI,2BACJH,UAAU,qB,GAbDI,c,kCCoCJG,G,uLAjCX,OACE,4BAAQP,UAAU,UAChB,uBAAGA,UAAU,sBAAb,4BAIA,uBACEQ,KAAK,oCACLC,OAAO,SACPC,IAAI,sBACJV,UAAU,gBAEV,yBACEC,IAAKU,IACLR,IAAI,SACJH,UAAU,mBAEd,uBACEQ,KAAK,oCACLC,OAAO,SACPC,IAAI,sBACJV,UAAU,gBAEV,yBACEC,IAAKW,IACLT,IAAI,UACJH,UAAU,wB,GA5BDI,cCaNS,G,uLAVX,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUI,cCIEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c2dcee72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-circle.93443885.svg\";","module.exports = __webpack_public_path__ + \"static/media/hero-image.b2851be8.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.72fadc36.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.d0fa6e8a.svg\";","import React, {Component} from 'react';\r\n\r\nimport lock from '../assets/logo-circle.svg';\r\n\r\nimport '../layout/components/nav.sass';\r\n\r\nclass Nav extends Component {\r\n  render() {\r\n    return(\r\n      <nav className=\"nav\">\r\n        <h1 className=\"nav__header\">\r\n          <img \r\n            src={lock} \r\n            alt=\"Trustless Fund Logo\"\r\n            className=\"nav__logo\" />\r\n          Trustless Fund\r\n        </h1>\r\n        <button className=\"nav__button\">\r\n          Coming Soon\r\n        </button>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;","import React, {Component} from 'react';\r\n\r\nimport heroImage from '../assets/hero-image.svg';\r\n\r\nimport '../layout/components/hero.sass';\r\n\r\nclass Hero extends Component {\r\n  render() {\r\n    return(\r\n      <section className=\"hero\">\r\n        <h1 className=\"hero__header\">\r\n          Lock in the Time-Value of Your Money\r\n        </h1>\r\n        <h4 className=\"hero__subheader\">\r\n          Trustless Fund is an advanced timelock for ETH and ERC-20 assets. \r\n        </h4>\r\n        <img \r\n          src={heroImage} \r\n          alt=\"Trustless Fund Interface\" \r\n          className=\"hero__image\" />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hero;","import React, {Component} from 'react';\r\n\r\nimport twitter from '../assets/twitter.svg';\r\nimport github from '../assets/github.svg';\r\n\r\nimport '../layout/components/footer.sass';\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return(\r\n      <footer className=\"footer\">\r\n        <p className=\"footer__disclaimer\">\r\n          {/* TODO: Actually get the current year */}\r\n          Â© 2020 Trustless Fund\r\n        </p>\r\n        <a \r\n          href=\"https://github.com/trustless-fund\" \r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"footer__link\"\r\n        >\r\n          <img \r\n            src={github} \r\n            alt=\"Github\"\r\n            className=\"footer__image\" />\r\n        </a>\r\n        <a \r\n          href=\"https://twitter.com/trustlessfund\" \r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"footer__link\"\r\n        >\r\n          <img \r\n            src={twitter} \r\n            alt=\"Twitter\"\r\n            className=\"footer__image\" />\r\n        </a>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;","import React, {Component} from 'react';\r\n\r\nimport Nav from './components/Nav';\r\nimport Hero from './components/Hero';\r\nimport Footer from './components/Footer';\r\n\r\nimport './layout/config/_base.sass';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Nav />\r\n        <Hero />\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}